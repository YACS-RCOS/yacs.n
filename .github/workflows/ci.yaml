name: CI

on: push

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
          ref: ${{ github.head_ref }}
      - name: Run prettier on src/web
        working-directory: src/web
        run: |
          PRETTIER_VERSION=$(cat package.json | \
            grep \"prettier\" | \
            tr -d '[:space:]' | \
            awk -F: '{print substr($2, 2, length($2) - 3)}')

          if ! npx prettier@$PRETTIER_VERSION "**/*.(js|vue)" --check;
          then
            echo "Running prettier"
            npx prettier@$PRETTIER_VERSION "**/*.(js|vue)" --write

            echo "Setting up git"
            git config --global user.name "I'm a Github Action"
            git config --global user.email "beepboop@github.com"
            git remote set-url origin https://x-access-token:${{ secrets.LINT_PAT }}@github.com/${{ github.repository }}

            echo "Committing changes"
            git commit -am "beep boop Github Action Master Branch CI Prettier hard at work"
            git push
            echo "Changes pushed"

            exit 1
          else
            echo "Files are clean"
          fi

  backend-unit-tests:
    needs: lint
    name: Run unit unit tests on backend
    runs-on: ubuntu-18.04

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: yacs
        ports:
          - 5432/tcp
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Update Ubuntu
        run: sudo apt-get update

      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Update pip
        run: python -m pip install --upgrade pip

      - name: Load cache for pip
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: |
            ${{ runner.os }}-backend-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-backend-pip-

      - name: Install dependencies
        run: pip install -r src/api/requirements.txt -r tests/requirements.txt

      - name: Run unit tests with coverage
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
          DB_PORT: ${{ job.services.postgres.ports[5432] }}
          DB_USER: postgres
          DB_PASS: postgres
          TEST_CSV: rpi_data/summer-2020.csv
          PGHOST: localhost
          PGPORT: ${{ job.services.postgres.ports[5432] }}
          PGUSER: postgres
          PGPASSWORD: postgres
        run: |
          bash scripts/test.sh
          coveralls

  cypress:
    needs: lint
    runs-on: ubuntu-latest

    services:
      yacs_db:
        image: postgres
        env:
          POSTGRES_USER: yacs
          POSTGRES_PASSWORD: easy_dev_pass
          POSTGRES_DB: yacs
        ports:
          - 5432/tcp
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2

      - name: Start API and web
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.production.yml up -d yacs_api yacs_web

      - name: Run cypress
        uses: cypress-io/github-action@v2
        env:
          CYPRESS_BASE_URL: http://localhost
        with:
          working-directory: tests/integration
          wait-on: "http://localhost"

      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: tests/integration/cypress/screenshots
      # Test run video was always captured, so this action uses "always()" condition
      - uses: actions/upload-artifact@v1
        if: always()
        with:
          name: cypress-videos
          path: tests/integration/cypress/videos

      - uses: actions/upload-artifact@v1
        with:
          name: nyc-report
          path: tests/integration/coverage/lcov-report

      - name: Upload coverage
        working-directory: tests/integration
        run: npm run coveralls

  publish-action-status:
    needs: backend-unit-tests
    if: always()
    runs-on: ubuntu-latest

    steps:
      - uses: technote-space/workflow-conclusion-action@v1
      - name: Publish status checks
        uses: LouisBrunner/checks-action@v0.1.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: CI
          conclusion: ${{ env.WORKFLOW_CONCLUSION }}
