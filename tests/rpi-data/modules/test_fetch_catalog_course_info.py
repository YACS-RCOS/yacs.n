# https://github.com/okken/pytest-check
# https://stackoverflow.com/questions/36749796/how-to-run-all-pytest-tests-even-if-some-of-them-fail/36760045
# reason behind using this: Fixing the regex for parsing prereqs one at a time is not ideal. Better to know all cases that failed.
#                           Could split each case into its own unit test, but seems unnecessary.
import pytest_check as check

def test_prereq_parsing(acalog_client):
    extract_prereq_string = acalog_client._extract_prereq_from_precoreq_str
    extract_prereqs = acalog_client._extract_prereqs_from_prereq_str
    res1 = extract_prereqs(extract_prereq_string("Prerequisite: ARCH 2510 except M.Arch. students."))
    res2 = extract_prereqs(extract_prereq_string("Corequisite:    BMED 4200 or permission of instructor. Prerequisites: BMED 2100, BMED 2300, and BMED 2540"))
    res3 = extract_prereqs(extract_prereq_string(" CHEM 2250 and BIOL 1010 or BIOL 2120 or equivalents."))
    res4 = extract_prereqs(extract_prereq_string("  Prerequisite: IHSS 2610 Design and Innovation Studio II.  "))
    res5 = extract_prereqs(extract_prereq_string("MANE 2710 Thermodynamics and MANE 2720 Fluid Mechanics; Corequisites: MANE 4730 Heat Transfer."))
    res6 = extract_prereqs(extract_prereq_string("There are no prerequisites for this course. This is a companion course to CHEM 4620 Introduction to Polymer Chemistry."))
    res7 = extract_prereqs(extract_prereq_string("College-level calculus, complex functions, and partial differential equations are prerequisite."))
    res8 = extract_prereqs(extract_prereq_string("Prerequisite or Corequisite: ARCH 4520 Construction Industry Seminar 2."))
    res9 = extract_prereqs(extract_prereq_string("Prerequisites for undergraduates: ARCH 2360 or equivalent or ARCH 4740 or equivalent. Corequisite for M.Arch. 1: ARCH 6610."))
    res10 = extract_prereqs(extract_prereq_string("MATH 2400 as a prerequisite only."))
    res11 = extract_prereqs(extract_prereq_string("Junior status. \n "))
    res12 = extract_prereqs(extract_prereq_string("Prerequisite ARCH 4510 Construction Industry Seminar 1."))
    res13 = extract_prereqs(extract_prereq_string("Prerequisites include PHYS 1200 Physics II (or equivalent) and MATH 1020 Calculus II (or equivalent)."))
    res14 = extract_prereqs(extract_prereq_string("Prerequisite preferences:  Data Science ITWS/CSCI/ERTH 4350, Foundations of Data Science CSCI 49XX or permission of instructor. Database experience (pref). Script programming (pref)."))
    res15 = extract_prereqs(extract_prereq_string("Prerequisite/Corequisite:  BIOL 4620  and  BIOL 4760  ."))
    res16 = extract_prereqs(extract_prereq_string("MATH 2400 as a prerequisite only."))
    res17 = extract_prereqs(extract_prereq_string("Experiments depend on the theoretical material in CHEM 4110 and CHEM 4420, which are corequisites."))
    res18 = extract_prereqs(extract_prereq_string("Corequisite: BIOL 1010 Introduction to Biology."))
    res19 = extract_prereqs(extract_prereq_string(""))
    res20 = extract_prereqs(extract_prereq_string("Successful completion of ENGR 6200."))
    check.equal(res1, ['ARCH-2510'])
    check.equal(res2, ['BMED-2100', 'BMED-2300', 'BMED-2540'])
    check.equal(res3, ['CHEM-2250', 'BIOL-1010', 'BIOL-2120'])
    check.equal(res4, ['IHSS-2610'])
    check.equal(res5, ['MANE-2710', 'MANE-2720'])
    check.equal(res6, ['CHEM-4620'])
    check.equal(res7, [])
    check.equal(res8, ['ARCH-4520'])
    check.equal(res9, ['ARCH-2360', 'ARCH-4740'])
    check.equal(res10, ['MATH-2400'])
    check.equal(res11, [])
    check.equal(res12, ['ARCH-4510'])
    check.equal(res13, ['PHYS-1200', 'MATH-1020'])
    check.equal(res14, ['ERTH-4350'])
    check.equal(res15, ['BIOL-4620', 'BIOL-4760'])
    check.equal(res16, ['MATH-2400'])
    check.equal(res17, [])
    check.equal(res18, [])
    check.equal(res19, [])
    check.equal(res20, ['ENGR-6200'])

def test_coreq_parsing(acalog_client):
    extract_coreq_string = acalog_client._extract_coreq_from_precoreq_str
    extract_coreq = acalog_client._extract_coreqs_from_coreq_str
    res1 = extract_coreq(extract_coreq_string("Prerequisites or corequisites: BCBP 4760 and BIOL 4620, or permission of instructor."))
    res2 = extract_coreq(extract_coreq_string("BIOL 1015 Introduction to Biology Laboratory is a corequisite."))
    res3 = extract_coreq(extract_coreq_string("Corequisite: BIOL 1010 Introduction to Biology."))
    res4 = extract_coreq(extract_coreq_string("Prerequisite/Corequisite: BIOL 4620 and BIOL 4760 ."))
    res5 = extract_coreq(extract_coreq_string("Corequisite:  BMED 4200 or permission of instructor. Prerequisites: BMED 2100, BMED 2300, and BMED 2540"))
    res6 = extract_coreq(extract_coreq_string("Prerequisites: MATH 2010, PHYS 1200. Corequisite: CSCI 1100 or CSCI 1190."))
    res7 = extract_coreq(extract_coreq_string("Pre- or corequisite: CHEM 2250 or a similar course in organic chemistry."))
    res8 = extract_coreq(extract_coreq_string("Experiments depend on the theoretical material in CHEM 4110 and CHEM 4420, which are corequisites."))
    res9 = extract_coreq(extract_coreq_string("Corequisites: ECSE 2050 and either ECSE 2100 or PHYS 4210."))
    res10 = extract_coreq(extract_coreq_string("Prerequisites: ECSE 2050 and ECSE 2610; ECSE 2210 recommended.Corequisite: ECSE 4040 or permission of instructor."))
    res11 = extract_coreq(extract_coreq_string("Prerequisite:  PHYS 1200; corequisite:  MATH 2400."))
    res12 = extract_coreq(extract_coreq_string("Prerequisite: CHEM 1100; Corequisite: MATH 2400, ENGR 2250."))
    res13 = extract_coreq(extract_coreq_string("Prerequisite: ENGR 1100 Introduction to Engineering Analysis; Corequisite: MATH 2400 Introduction to Differential Equations and PHYS 1200 or PHYS 1250 Physics II."))
    res14 = extract_coreq(extract_coreq_string("ERTH 1100 corequisite (preferred) or prerequisite."))
    res15 = extract_coreq(extract_coreq_string("ERTH 1200 corequisite (preferred) or prerequisite."))
    res16 = extract_coreq(extract_coreq_string("Prerequisites/Corequisites: ERTH 1200, ERTH 2610 strongly recommended. Permission of the instructor is required."))
    res17 = extract_coreq(extract_coreq_string("Pre-or corequisite: ENGR 2600."))
    res18 = extract_coreq(extract_coreq_string("Successful completion of ENGR 6200."))
    res19 = extract_coreq(extract_coreq_string(""))
    res20 = extract_coreq(extract_coreq_string("Prerequisite: ARCH 2510 except M.Arch. students."))
    check.equal(res1, ['BCBP-4760', 'BIOL-4620'])
    check.equal(res2, ['BIOL-1015'])
    check.equal(res3, ['BIOL-1010'])
    check.equal(res4, ['BIOL-4620', 'BIOL-4760'])
    check.equal(res5, ['BMED-4200'])
    check.equal(res6, ['CSCI-1100', 'CSCI-1190'])
    check.equal(res7, ['CHEM-2250'])
    check.equal(res8, ['CHEM-4110', 'CHEM-4420'])
    # another one of those cases where there's a 'and either'. Not technically correct,
    # but will probably make regex much more ugly (if that's possible)
    check.equal(res9, ['ECSE-2050', 'ECSE-2100', 'PHYS-4210'])
    check.equal(res10, ['ECSE-4040'])
    check.equal(res11, ['MATH-2400'])
    check.equal(res12, ['MATH-2400', 'ENGR-2250'])
    check.equal(res13, ['MATH-2400', 'PHYS-1200', 'PHYS-1250'])
    check.equal(res14, ['ERTH-1100'])
    check.equal(res15, ['ERTH-1200'])
    check.equal(res16, ['ERTH-1200', 'ERTH-2610'])
    check.equal(res17, ['ENGR-2600'])
    check.equal(res18, [])
    check.equal(res19, [])
    check.equal(res20, [])
