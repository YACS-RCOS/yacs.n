FROM node:13-alpine as develop-stage
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY ./ .

FROM develop-stage as build-stage
RUN npm run build


FROM nginx:mainline as builder

ARG ENABLED_MODULES

RUN set -ex \
  && if [ "$ENABLED_MODULES" = "" ]; then \
  echo "No additional modules enabled, exiting"; \
  exit 1; \
  fi

COPY ./ /modules/

RUN set -ex \
  && apt-get update \
  && apt-get install -y --no-install-suggests --no-install-recommends \
  patch make wget mercurial devscripts debhelper dpkg-dev \
  quilt lsb-release build-essential libxml2-utils xsltproc \
  equivs git g++ \
  && hg clone https://hg.nginx.org/pkg-oss/ \
  && cd pkg-oss \
  && mkdir /tmp/packages \
  && for module in $ENABLED_MODULES; do \
    echo "Building $module for nginx-$NGINX_VERSION"; \
    if [ -d /modules/$module ]; then \
      echo "Building $module from user-supplied sources"; \
      # check if module sources file is there and not empty
      if [ ! -s /modules/$module/source ]; then \
        echo "No source file for $module in modules/$module/source, exiting"; \
        exit 1; \
      fi; \
      # some modules require build dependencies
      if [ -f /modules/$module/build-deps ]; then \
        echo "Installing $module build dependencies"; \
        apt-get update && apt-get install -y --no-install-suggests --no-install-recommends $(cat /modules/$module/build-deps | xargs); \
      fi; \
      # if a module has a build dependency that is not in a distro, provide a
      # shell script to fetch/build/install those
      # note that shared libraries produced as a result of this script will
      # not be copied from the builder image to the main one so build static
      if [ -x /modules/$module/prebuild ]; then \
        echo "Running prebuild script for $module"; \
        /modules/$module/prebuild; \
      fi; \
        /pkg-oss/build_module.sh -v $NGINX_VERSION -f -y -o /tmp/packages -n $module $(cat /modules/$module/source); \
    elif make -C /pkg-oss/debian list | grep -P "^$module\s+\d" > /dev/null; then \
      echo "Building $module from pkg-oss sources"; \
      cd /pkg-oss/debian; \
      make rules-module-$module BASE_VERSION=$NGINX_VERSION NGINX_VERSION=$NGINX_VERSION; \
      mk-build-deps --install --tool="apt-get-get -o Debug::pkgProblemResolver=yes --no-install-recommends --yes" debuild-module-$module/nginx-$NGINX_VERSION/debian/control; \
      make module-$module BASE_VERSION=$NGINX_VERSION NGINX_VERSION=$NGINX_VERSION; \
      find ../../ -maxdepth 1 -mindepth 1 -type f -name "*.deb" -exec mv -v {} /tmp/packages/ \;; \
    else \
      echo "Don't know how to build $module module, exiting"; \
      exit 1; \
    fi; \
  done


FROM nginx:mainline as production-stage
# For NGINX Modules
ARG ENABLE_MODULES
COPY --from=builder /tmp/packages /tmp/packages

RUN mkdir /app
COPY --from=build-stage /app/dist /app
COPY nginx.conf /etc/nginx/nginx.template.conf
COPY scripts/entrypoint.sh /usr/local/bin/entrypoint.sh
COPY cert/ /etc/nginx/cert

RUN \
  apt-get update --no-install-recommends && \
  apt-get install openssl --no-install-recommends -y && \
  apt-get install --no-install-suggests --no-install-recommends -y \
  /tmp/packages/nginx-module-brotli_${NGINX_VERSION}*.deb && \
  rm -rf /tmp/packages && \
  rm -rf /var/lib/apt-get/lists/

CMD ["/usr/local/bin/entrypoint.sh"]
